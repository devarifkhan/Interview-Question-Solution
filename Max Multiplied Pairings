You are given two lists of integers nums and multipliers. Consider an operation where we remove any number in nums and remove any number in multipliers then multiply them together. Given that you must repeat this operation until one of the lists is empty, return the maximum sum of the multiplied numbers.

Note that the integers may be negative, zero, and/or positive.

Constraints

0 ≤ n ≤ 100,000 where n is the length of nums
0 ≤ m ≤ 100,000 where m is the length of multipliers
Example 1
Input
nums = [-5, 3, 2]
multipliers = [-3, 1]
Output
18



Explaination:

Intuition
If we make both arrays the same size and sort them, we can just multiply the elements and we have our answer.

Implementation
Add zeros to the smaller array. Any element * 0 is 0 anyways so it doesn't affect final result.
Sort the arrays.
Multiply each element in the array and get the sum.
Example #1
Padding 0s,
nums = [-5, 3, 2]
multipliers = [-3, 1] = [-3,1,0]

After sorting,
nums = [-5, 2, 3]
multipliers = [-3,0,1]

After multiplying final answer is 15 + 0 + 3 = 18

Time Complexity
\mathcal{O}(n log n)O(nlogn) for sorting. n is larger array.

Space Complexity
Worst case \mathcal{O}(n)O(n) where n is larger array



class Solution:
    def solve(self, nums, multipliers):
        n, m = len(nums), len(multipliers)
        multipliers += [0] * (n - m)
        nums += [0] * (m - n)
        nums.sort()
        multipliers.sort()
        return sum(a * b for a, b in zip(nums, multipliers))
